#!/bin/sh

# shellcheck disable=SC2006,SC2034

fail()
{
  fa_message="${1}"
  printf %b "not ok ${uu_CURRENT_TEST_NUMBER} ${uu_CURRENT_TEST}\n"
  printf %b "${fa_message}\n"
  exit 1
}

assert_equals()
{
  eq_expected="${1}"
  eq_actual="${2}"
  
  if [ "${eq_expected}" != "${eq_actual}" ]; then
    fail "# expected [${eq_expected}] but was [${eq_actual}]"
  fi
}

assert_not_equals()
{
  ne_unexpected="${1}"
  ne_actual="${2}"

  if [ "${ne_unexpected}" = "${ne_actual}" ]; then
    fail "# expected value different than [${ne_unexpected}] but was [${ne_actual}]"
  fi
}

assert_matches()
{
  ma_string="${1}"
  ma_regex="${2}"

  if echo "${ma_string}" | grep -q -E "${ma_regex}"; then
    true
  else
    fail "# expected regex [${ma_regex}] to match [${ma_string}]"
  fi
}

assert_not_matches()
{
  nm_string="${1}"
  nm_regex="${2}"

  if echo "${nm_string}" | grep -q -E "${nm_regex}"; then
    fail "# expected regex [${nm_regex}] should not match but matched [${nm_string}]"
  fi
}

assert_matches_file_content()
{
  mf_regex="${1}"
  mf_file="${2}"

  if grep -q -E "${mf_regex}" "${mf_file}"; then
    true
  else
    fail "# expected regex [${mf_regex}] to match file content [${mf_file}]"
  fi
}

assert_not_matches_file_content()
{
  nf_regex="${1}"
  nf_file="${2}"

  if grep -q -E "${nf_regex}" "${nf_file}"; then
    fail "# expected regex [${nf_regex}] should not match but matched file content [${nf_file}]"
  fi
}

assert()
{
  as_assertion="${1}"
  
  as_status=0
  eval "(${as_assertion})" >/dev/null && as_status=$? || as_status=$?
  if [ "${as_status}" -ne 0 ]; then
    fail "# expected status code [0] but was [${as_status}]"
  fi
}

assert_fails()
{
  af_assertion="${1}"
  
  af_status=0
  eval "(${af_assertion})" >/dev/null && af_status=$? || af_status=$?
  if [ "${af_status}" -eq 0 ]; then
    fail "# expected different status code than [0] but was [${af_status}]"
  fi
}

assert_status_code()
{
  sc_expected_status="${1}"
  sc_assertion="${2}"
  
  sc_status=0
  eval "(${sc_assertion})" >/dev/null && sc_status=$? || sc_status=$?
  if [ "${sc_status}" -ne "${sc_expected_status}" ]; then
    fail "# expected status code [${sc_expected_status}] but was [${sc_status}]"
  fi
}

assert_file_exists()
{
  fe_file="${1}"

  if [ ! -f "${fe_file}" ]; then
    fail "# expected file to exist [${fe_file}]"
  fi
}

run_test()
{
  ru_test="${1}"
  #set -e
  "${ru_test}" 2>>"${TEMP_DIR}/run_test.stderr" && printf %b "ok ${uu_CURRENT_TEST_NUMBER} ${ru_test}\n"
}

run_tests()
{
  rt_test_file="${1}"
  rt_failure=0
  rt_tests=`grep -E "^test_.*\(\)" "${rt_test_file}" | sed -e 's:().*::g'`
  for rt_test in ${rt_tests}; do
    uu_CURRENT_TEST="${rt_test}"
    # shellcheck disable=SC2003
    uu_CURRENT_TEST_NUMBER=`expr "${uu_CURRENT_TEST_NUMBER}" + 1`
    (
      rt_status=0
      before_each_test
      run_test "${rt_test}" || rt_status=$?
      after_each_test
      exit "${rt_status}"
    )
    # shellcheck disable=SC2003
    rt_failure=`expr $? \| ${rt_failure}`
  done
  return "${rt_failure}"
}

_usage()
{
  printf %b "Usage: ./run_test [-h] UAC_DIR OPERATING_SYSTEM SYSTEM_ARCH
                  USERNAME HOSTNAME <test_file>

Optional Arguments:
  -h, --help        Display this help and exit.

Positional Arguments:
  UAC_DIR           UAC source code directory.
  OPERATING_SYSTEM  Specify the host operating system.
                    Options: aix, android, esxi, freebsd, linux, macos, netbsd
                             netscaler, openbsd, solaris
  SYSTEM_ARCH       Specify the host system archtecture.
  USERNAME          Specify the username is running the unit test.
  HOSTNAME          Specify the host system hostname.

  <test_file>       Test file(s).
"
}

# remove all existing aliases
unalias -a

# set locale
LANG=C
export LANG
LC_ALL=C
export LC_ALL

# standards conformance for GNU utilities
_POSIX2_VERSION=199209
export _POSIX2_VERSION

# get current working dir
# $PWD is not set in solaris 10
UAC_UNIT_TEST_DIR=`pwd`

# set path
PATH="/usr/xpg4/bin:/usr/xpg6/bin:/bin:/sbin:/usr/bin:/usr/sbin"
PATH="${PATH}:/usr/local/bin:/usr/local/sbin:/usr/ucb:/usr/ccs/bin:/opt/bin"
PATH="${PATH}:/opt/sbin:/opt/local/bin:/netscaler"
export PATH

# global vars
TEMP_DIR=""
CURRENT_HOSTNAME=""
CURRENT_USER=""
MOUNT_POINT=""
OPERATING_SYSTEM=""
SYSTEM_ARCH=""

# the following variables are not always set on some systems, so they are set
# here to avoid the script exiting with errors after set -u is used below
# shellcheck disable=SC2269
HOME="${HOME}"
# shellcheck disable=SC2269
HOSTNAME="${HOSTNAME}"

# local vars
uu_CURRENT_TEST=""
uu_CURRENT_TEST_NUMBER=0

# parse command line arguments
while [ "${1:-}" != "" ]; do
  case "${1}" in
    "-h"|"--help")
      _usage
      exit 1
      ;;
    # invalid arguments
    -*)
      printf %b "$0: invalid option '${1}'\n\
Try '$0 --help' for more information.\n" >&2
      exit 1
      ;;
    # positional arguments
    *)
      if [ -z "${UAC_DIR}" ]; then
        UAC_DIR="${1}"
      elif [ -z "${OPERATING_SYSTEM}" ]; then
        OPERATING_SYSTEM="${1}"
      elif [ -z "${SYSTEM_ARCH}" ]; then
        SYSTEM_ARCH="${1}"
      elif [ -z "${CURRENT_USER}" ]; then
        CURRENT_USER="${1}"
      elif [ -z "${CURRENT_HOSTNAME}" ]; then
        CURRENT_HOSTNAME="${1}"
      else
        break
      fi
      ;;
  esac
  shift
done

# treat unset variables as an error when substituting
set -u

if [ -z "${UAC_DIR}" ] || [ ! -f "${UAC_DIR}/uac" ] || [ ! -d "${UAC_DIR}/lib" ]; then
  printf %b "$0: invalid UAC directory: '${UAC_DIR}'\n\
Try '$0 --help' for more information.\n" >&2
  exit 1
fi

# check if operating system is supported
if [ "${OPERATING_SYSTEM}" != "android" ] \
  && [ "${OPERATING_SYSTEM}" != "aix" ] \
  && [ "${OPERATING_SYSTEM}" != "esxi" ] \
  && [ "${OPERATING_SYSTEM}" != "freebsd" ] \
  && [ "${OPERATING_SYSTEM}" != "linux" ] \
  && [ "${OPERATING_SYSTEM}" != "macos" ] \
  && [ "${OPERATING_SYSTEM}" != "netbsd" ] \
  && [ "${OPERATING_SYSTEM}" != "netscaler" ] \
  && [ "${OPERATING_SYSTEM}" != "openbsd" ] \
  && [ "${OPERATING_SYSTEM}" != "solaris" ]; then
  printf %b "$0: invalid operating system '${OPERATING_SYSTEM}'\n\
Try '$0 --help' for more information.\n" >&2
  exit 1
fi

if [ -z "${SYSTEM_ARCH}" ]; then
  printf %b "$0: invalid system arch.\n\
Try '$0 --help' for more information.\n" >&2
  exit 1
fi

if [ -z "${CURRENT_USER}" ]; then
  printf %b "$0: invalid username.\n\
Try '$0 --help' for more information.\n" >&2
  exit 1
fi

if [ -z "${CURRENT_HOSTNAME}" ]; then
  printf %b "$0: invalid hostname.\n\
Try '$0 --help' for more information.\n" >&2
  exit 1
fi

TEMP_DIR="${UAC_UNIT_TEST_DIR}/uac-unit-test-data.tmp"
# remove any existing (old) temporary data
if [ -d "${TEMP_DIR}" ]; then
  rm -rf "${TEMP_DIR}" >/dev/null 2>/dev/null
  # shellcheck disable=SC2181
  if [ "$?" -gt 0 ]; then
    printf %b "$0: cannot remove old temporary data directory from previous \
test '${TEMP_DIR}'.\n"
    exit 1
  fi
fi

mkdir "${TEMP_DIR}" >/dev/null
if [ ! -d "${TEMP_DIR}" ]; then
  printf %b "$0: cannot create temporary directory at '${TEMP_DIR}'\n" >&2
  exit 1
fi

MOUNT_POINT="${TEMP_DIR}/mount_point"

# load UAC lib files
for uu_lib_file in "${UAC_DIR}"/lib/*.sh; do
  # shellcheck disable=1090
  . "${uu_lib_file}"
done

# check if test files exist
for uu_test_file in "${@}"; do
  if [ ! -f "${uu_test_file}" ]; then
    printf %b "$0: no such file or directory: '${uu_test_file}'\n" >&2
    exit 1
  fi
done

# count number of tests
uu_total_number_of_tests=0
for uu_test_file in "${@}"; do
  # shellcheck disable=SC2126
  uu_total_tests=`grep -E "^test_.*\(\)" "${uu_test_file}" | wc -l | awk '{print $1}'`
  # shellcheck disable=SC2003
  uu_total_number_of_tests=`expr "${uu_total_number_of_tests}" + "${uu_total_tests}"`
done

# initiate unit
# shellcheck disable=SC1091
. "./lib/setup_unit_test.sh" && setup_unit_test

uu_failure=0
printf %b "1..${uu_total_number_of_tests}\n"
for uu_test_file in "${@}"; do
  printf %b "# Running tests in ${uu_test_file}\n"
  set -e
  # shellcheck disable=SC1090
  . "./${uu_test_file}"
  set +e
  setup_test
  run_tests "${uu_test_file}" || uu_failure=$?
  # shellcheck disable=SC2003
  uu_failure=`expr $? \| ${uu_failure}`
  shutdown_test
done

# shellcheck disable=SC1091
. "./lib/shutdown_unit_test.sh" && shutdown_unit_test

exit "${uu_failure}"